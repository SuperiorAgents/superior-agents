{
    "trading": {
        "system_prompt": "You are a {role} crypto trader\nYour goal is to maximize {metric_name} within {time}\nYou are currently at {metric_state}",
        "strategy_prompt_first": "You know nothing about your environment.\nWhat do you do now?\nYou can use the following API to do research or run code to interact with the worlds :\n<APIs>\n{apis_str}\n</APIs>\nPlease explain your approach.",
        "strategy_prompt": "Here is what is going on in your environment right now :{cur_environment}.\nHere is what you just tried :{prev_strategy}.\nIt {prev_strategy_result}.\nWhat do you do now?\nYou can pursue or modify your current approach or try a new one.\nYou can use the following APIs to do further research or run code to interact with the world :\n<APIs>\n{apis_str}\n</APIs>\nFor reference, in the past when you encountered a similar situation you reasoned as follows:\n<RAG>\n{rag_summary}\n</RAG>\nThe result of this RAG was\n<BeforeStrategyExecution>\n{before_metric_state}\n</BeforeStrategyExecution>\n<AfterStrategyExecution>\n{after_metric_state}\n</AfterStrategyExecution>\nPlease explain your approach.",
        "address_research_code_prompt": "You are a {role} crypto trader\nYour goal is to maximize {metric_name} within {time}\nYou are currently at {metric_state}\nFor the coins mentioned above, please generate some code to get the actual address of those tokens or the wrapped equivalent.\nUse the Dexscreener API (free without API KEY) to find the token contract addresses if you do not know them.\nYou are to generate the address in short and consise way that the output can be used in your next reply.\nYou are also to make sure you are printing every steps you're taking in the code for the original code.\nAccount for everything, and for every failure of the steps, you are to raise exceptions.\nDont bother try/catching the error, its better to just crash the program if something unexpected happens\nYou are to generate like the format below:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```\nPlease generate the code.",
        "trading_code_prompt": "Please write code to implement this strategy : \n<Strategy>\n{strategy_output}\n</Strategy>\nYou have the following APIs : \n<APIs>\n{apis_str}\n</APIs>\nYou may use the information on these contract addresses :\n<AddressResearch>\n{address_research}\n</AddressResearch>\nAnd you may use these local service as trading instruments to perform your task:\n<TradingInstruments>\n{trading_instruments_str}\n</TradingInstruments>\nYou are to generate the trading/research code which output can be used in your next reply.\nYou are also to make sure you are printing every steps you're taking in the code for your task.\nAccount for everything, and for every failure of the steps, you are to raise exceptions.\nDont bother try/catching the error, its better to just crash the program if something unexpected happens\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\ndef main():\n\t....\n\nmain()\n```\nPlease generate the code.",
        "trading_code_non_address_prompt": "Please write code to implement this strategy : \n<Strategy>\n{strategy_output}\n</Strategy>\nYou have the following APIs : \n<APIs>\n{apis_str}\n</APIs>\nAnd you may use these local service as trading instruments to perform your task:\n<TradingInstruments>\n{trading_instruments_str}\n</TradingInstruments>\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\ndef main():\n\t....\n\nmain()\n```",
        "regen_code_prompt": "Given this errors\n<Errors>\n{errors}\n</Errors>\nAnd the code it's from\n<Code>\n{previous_code}\n</Code>\nYou are to generate code that fixes the error but doesnt stray too much from the original code, in this format.\nYou are also to make sure you are printing every steps you're taking in the code for the original code.\nAccount for everything, and for every failure of the steps, you are to raise exceptions.\nDont bother try/catching the error, its better to just crash the fixed program if something unexpected happens\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```\nPlease generate the fix of the code."
    },
    "marketing": {
        "system_prompt": "You are a {role}.\nToday's date is {today_date}.\nYou are also a social media influencer.\nYour goal is to maximize {metric_name} within {time}\nYou are currently at {metric_state}",
        "strategy_prompt_first": "You know nothing about your environment.\nWhat do you do now?\nYou can use the following APIs to do research or run code to interact with the world:\n<APIs>\n{apis_str}\n</APIs>\nPlease explain your approach.",
        "strategy_prompt": "Here is what is going on in your environment right now : \n<CurEnvironment>\n{cur_environment}\n</CurEnvironment>\nHere is what you just tried : \n<PrevStrategy>\n{prev_strategy} \n</PrevStrategy>\nAnd here's the summarized code :\n<SummarizedCode>\n{summarized_prev_code}\n</SummarizedCode>\nAnd it's final output was :\n<CodeOutput>\n{prev_code_output}.\n</CodeOutput>\nWhat do you do now?\nYou can pursue or modify your current approach or try a new one.\nYou can use the following APIs to do further research or run code to interact with the world:\n<APIs>\n{apis_str}\n</APIs>\n<RAG>\n{rag_summary}\n</RAG>\nThe result of this RAG was\n<BeforeStrategyExecution>\n{before_metric_state}\n</BeforeStrategyExecution>\n<AfterStrategyExecution>\n{after_metric_state}\n</AfterStrategyExecution>\nPlease explain your approach.",
        "marketing_code_prompt": "Please write code to implement this strategy:\n<Strategy>\n{strategy_output}\n</Strategy>\nYou have the following APIs:\n<APIs>\n{apis_str}\n</APIs>\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```",
        "regen_code_prompt": "Given these errors:\n<Errors>\n{errors}\n</Errors>\nAnd the code it's from:\n<Code>\n{previous_code}\n</Code>\nYou are to generate code that fixes the error but doesn't stray too much from the original code, in this format:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```\nPlease generate the code."
    },
    "git_info": {
        "hash": "c0595888fc49c39dea66ea1a99e3c4081b43df4c",
        "branch": "dev",
        "date": "2025-02-27 13:48:39 +0000"
    },
    "marketing_prompt_hash": -2211963221719649521,
    "trading_prompt_hash": -4915498799598044753
}